rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        function isOwner() {
            return ("resource" in request && request.resource.id == request.auth.uid) || resource.id == request.auth.uid;
        }
        function isSignedIn() {
            return request.auth != null;
        }
        function isAdmin() {
            let user = get(/databases/$(database)/documents/users/$(request.auth.uid));
            return user != null && "isAdmin" in user.data && user.data.isAdmin;
        }
        function contains(arr) {
            return request.resource.data.keys().hasAny(arr);
        }

        match /{document=**} {
            allow read, write: if isAdmin();
        }
        match /--stats--/{col} {
            allow read: if isSignedIn();
            allow update: if isSignedIn() && (request.resource.data.increment - 1) == resource.data.increment;
        }
        match /users/{user} {
            allow read: if isOwner();
            allow create: if isOwner() && !contains(['isAdmin', 'userSupplierRef', 'userClientRef']) && !exists(/databases/$(database)/documents/users/$(request.resource.id));
        }
        match /suppliers/{supplier} {
            allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userSupplierRef == /databases/$(database)/documents/suppliers/$(resource.id);
        }
        match /clients/{client} {
            allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userClientRef == /databases/$(database)/documents/clients/$(resource.id);
        }
        match /orders/{order} {
            allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userSupplierRef == resource.data.orderSupplierRef;
        }
        match /products/{order} {
            allow read: if isSignedIn();
        }
    }
}